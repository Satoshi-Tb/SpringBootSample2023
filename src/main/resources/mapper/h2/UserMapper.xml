<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapperとxmlのマッピング -->
<mapper namespace="com.example.repositry.UserMapper">
  <!-- マッピング定義(ユーザー) -->
  <!--
  select結果とJavaクラスのマッピングを設定する。idタグと、resultタグでマッピングを定義する。
  idタグ: 必須タグ。いわゆるユニークキーに該当する。このタグの値の数だけ、戻り値のListにデータがセットされる。
    resultMapとselectの紐づけは、それぞれのid属性と、resultMap属性で紐づけを行う。
  associationタグ: マッピング定義内に別のマッピング定義を入れる。いわゆるテーブル結合で利用する。1対1の関係で使用する。
  collectionタグ: マッピング定義内に別のマッピング定義を入れる。1対多の関係で使用する。
  columnPrefix属性: select結果に別名指定する場合に使用する。prefix＋マッピング定義名出紐づけ可能になる。
   -->
  <resultMap type="com.example.domain.user.model.MUser" id="user">
    <id column="user_id" property="userId" />
    <result column="id" property="id" />  
    <result column="password" property="password" />
    <result column="user_name" property="userName" />
    <result column="birthday" property="birthday" />
    <result column="age" property="age" />
    <result column="gender" property="gender" />
    <result column="gender_name" property="genderName" />
    <result column="profile" property="profile" />
    <result column="department_id" property="departmentId" />
    <result column="role" property="role" />
    <result column="ins_user_id" property="insUserId" />  
    <result column="ins_date" property="insDate" />  
    <result column="upd_user_id" property="updUserId" />  
    <result column="upd_date" property="updDate" />  
    <association property="department" resultMap="department"/>
    <collection property="salaryList" resultMap="salary" columnPrefix="salary_"/>
  </resultMap>

  <!-- マッピング定義(部署) -->
  <resultMap type="com.example.domain.user.model.Department" id="department">
    <id column="department_id" property="departmentId" />
    <result column="department_name" property="departmentName" />
  </resultMap>
  
  <!-- マッピング定義(給料) -->
  <resultMap type="com.example.domain.user.model.Salary" id="salary">
    <id column="user_id" property="userId" />
    <id column="year_month" property="yearMonth" />
    <result column="salary" property="salary" />
  </resultMap>
  
    <!-- マッピング定義(給料) -->
  <resultMap type="com.example.domain.user.model.FilterItem" id="filter">
    <result column="filter_value" property="filterValue" />
    <result column="filter_label" property="filterLabel" />
    <result column="filter_count" property="count" />
  </resultMap>
  
  <!-- ユーザー1件登録 -->
  <insert id="insertOne">
    insert into m_user(
        user_id
      , password
      , user_name
      , birthday
      , age
      , gender
      , profile
      , department_id
      , role
      , ins_user_id
      , ins_date
      , upd_user_id
   	  , upd_date
    )
    values (
        #{userId}
      , #{password}
      , #{userName}
      , #{birthday}
      , #{age}
      , #{gender}
      , #{profile}
      , #{departmentId}
      , #{role}
      , #{userId}
      , CURRENT_TIMESTAMP()
      , #{userId}
      , CURRENT_TIMESTAMP()
    )
  </insert>
  
  <!-- ユーザー複数件取得 -->
  <!-- 
  whereタグ: ifタグが1つでもtrueとなれば、where句を追加する。
   -->
  <select id="findMany" resultMap="user">
    select
        m_user.user_id
      , m_user.user_id as id
      , m_user.password
      , m_user.user_name
      , m_user.birthday
      , m_user.age
      , m_user.gender
      , casewhen(m_user.gender = 1, '男性', '女性') as gender_name
      , m_user.profile
      , m_user.department_id
      , m_department.department_name
      , m_user.ins_user_id
      , m_user.ins_date
      , m_user.upd_user_id
      , m_user.upd_date
    from
      m_user
      left join m_department 
         on m_user.department_id = m_department.department_id
    <where>
      <if test="userId != null">
        m_user.user_id like '%' || #{userId} || '%'
      </if>
      <if test="userName != null">
        and m_user.user_name like '%' || #{userName} || '%'
      </if>
      <if test="gender != null">
        and m_user.gender = #{gender}
      </if>
      <if test="department_id != null">
        and m_department.department_id = #{department_id}
      </if>
    </where>
    order by
      m_user.user_id
  </select>
  
  
  <!-- ユーザー一覧共通SQL -->
  <sql id="userList">
      select
        m_user.user_id
      , m_user.user_id as id
      , m_user.password
      , m_user.user_name
      , m_user.birthday
      , m_user.age
      , m_user.gender
      , casewhen(m_user.gender = 1, '男性', '女性') as gender_name
      , m_user.profile
      , m_user.department_id
      , m_department.department_name
      , m_user.ins_user_id
      , m_user.ins_date
      , m_user.upd_user_id
      , m_user.upd_date
    from
      m_user
      left join m_department 
         on m_user.department_id = m_department.department_id
    <where>
      <if test="condition.userId != null">
        m_user.user_id like '%' || #{condition.userId} || '%'
      </if>
      <if test="condition.userName != null">
        and m_user.user_name like '%' || #{condition.userName} || '%'
      </if>
      <if test="condition.gender != null">
        and m_user.gender = #{condition.gender}
      </if>
      <if test="condition.departmentId != null">
        and m_department.department_id = #{condition.departmentId}
      </if>
    </where>
  </sql>
  
    <!-- 
  ページネーション利用版
   -->
  <select id="findManyByPagination" resultMap="user">
	<include refid="userList"/>
    order by
      m_user.user_id
    LIMIT #{condition.size} OFFSET #{condition.offset}
  </select>
  
      <!-- 
  ページネーション件数取得（もっと良いやり方あると思う）
   -->
  <select id="findManyByPaginationTotalCount" resultType="int">
    select count(*) as total_count
    from (
		<include refid="userList"/>
	)
  </select>
  
  <!-- フィルター検索用 -->
  <select id="getFilterByGender" resultMap="filter">
    select
      gender as filter_value
      , gender_name as filter_label
      , count(*) as filter_count
    from (
      <include refid="userList"/>
    )
    group by gender
    order by gender
  </select>

  <!-- フィルター検索用 -->
  <select id="getFilterByDepartmentId" resultMap="filter">
    select
      department_id as filter_value
      , department_name as filter_label
      , count(*) as filter_count
    from (
      <include refid="userList"/>
    )
    group by department_id
    order by department_id
  </select>
  
  <!-- ユーザー1件検索 -->
  <!-- resultMap: select結果とJavaクラスをマッピングするためのタグ -->
  <select id="findOne" resultMap="user">
    select
        m_user.user_id
      , m_user.user_id as id
      , m_user.password
      , m_user.user_name
      , m_user.birthday
      , m_user.age
      , m_user.gender
      , m_user.profile
      , m_user.role
      , m_department.department_id
      , m_department.department_name
      , t_salary.user_id as salary_user_id
      , t_salary.year_month as salary_year_month
      , t_salary.salary as salary_salary
    from
      m_user
      left join m_department
        on m_user.department_id = m_department.department_id
      left join t_salary
        on m_user.user_id = t_salary.user_id
    where
      m_user.user_id = #{userId}
  </select>

  <!-- 指定ユーザーの次のIDを取得 -->
  <select id="findNextUserId" resultType="String">
    select
        m_user.user_id
    from
      m_user
    where
      m_user.user_id > #{userId}
    order by m_user.user_id
    limit 1
  </select>

  <!-- 指定ユーザーの前のIDを取得 -->
  <select id="findBeforeUserId" resultType="String">
    select
        m_user.user_id
    from
      m_user
    where
      <![CDATA[ m_user.user_id < #{userId} ]]>
    order by m_user.user_id desc
    limit 1
  </select>

  <!-- ユーザー1件更新 -->
  <!-- 
    @Paramアノテーションで指定した値をSQLに埋め込むことができる。
    埋め込むには#{パラメータ名}で指定する。
   -->
  <update id="updateOne">
    update
      m_user
    set
        password = #{password}
      , user_name = #{userName}
      , upd_user_id = #{userId}
      , upd_date = CURRENT_TIMESTAMP()
    where
      user_id = #{userId}
  </update>

  <!-- ユーザー1件更新 パラメータModel版 -->
  <update id="updateByUser">
    update
      m_user
    set
    <choose>
      <when test="updateMode == 'append'">
        user_name = user_name || '　' || #{userName}
      </when>
      <otherwise>
        user_name = #{userName}
        , birthday = #{birthday}
        , age = #{age}
        , gender = #{gender}
        , profile = #{profile}
        , department_id = #{department.departmentId}
        , role = #{role}
      </otherwise>
    </choose>
    , upd_user_id = #{userId}
    , upd_date = CURRENT_TIMESTAMP()
    where
      user_id = #{userId}
  </update>

  <!-- ユーザー1件削除 -->
  <delete id="deleteOne">
    delete from
      m_user
    where
      user_id = #{userId}
  </delete>
  
  <!-- 複数ユーザー削除(IN句版) -->
  <delete id="deleteUsersByInClause">
  	delete from
  		m_user
    <where>
        <if test="userIds != null and userIds.size() > 0">
            user_id in
            <foreach item="userId" collection="userIds" open="(" separator="," close=")">
                #{userId}
            </foreach>
        </if>
    </where>
  </delete>
  
  <!-- 
  	複数ユーザー削除(IN句制限回避版
  	select 要素 結果を、UNION ALLでつないだSQLを試したかったが、H2データベースの場合
  	select 要素の要素部分のプレースホルダを置換できないので、H2専用構文で対応
   -->
  <delete id="deleteUsersByUnionClause">
  	delete from
  		m_user
    <where>
        <if test="userIds != null and userIds.size() > 0">
        	EXISTS (
		        SELECT 1 FROM (
		            VALUES
		            <foreach collection="userIds" item="userId" separator=",">
		                (#{userId})
		            </foreach>
		        ) AS temp(USER_ID)
		        WHERE temp.USER_ID = m_user.user_id
       		)
        </if>
    </where>
  </delete>
</mapper>